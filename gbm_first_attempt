

## Perform A vs. B comparison, using all replicates, for known (reference only mode) transcripts

(raw counts using htseq output with EdgeR will come later)

	mkdir -p $gbm/de/ballgown/ref_only
	cd $gbm/de/ballgown/ref_only/


Use printf to create/print a table with ids, type (each type of sample is a type), and path to the file, as the header. Then n returns a new line. 
## (note: id needs to match the file folder names created by stringtie)

Bascially, need a table that needs to look like this to feed into R:

ids type path-to-file-011_invitro_1 011 $gbm/expression/stringtie/1 011_invitro_2 011 $gbm/expression/stringtie/2 ... ...

goal is to generate a header file to load into R, for ALL samples for principal component analysis (the simplest form of multidimentional scaling), and also a file for pairwise comparisons. since we have a ton of comparisisons, might just not do this for now and only do the PCA. 

file for all 011 samples for PCA: (this is how the script should look like (without the enters inbetween each line):

printf "\"ids\",\"type\",\"path
\"\n\"1\",\"011_slice\",\"$gbm/expression/stringtie/ref_only/1
\"\n\"2\",\"011_slice\",\"$gbm/expression/stringtie/ref_only/2
\"\n\"3\",\"011_organoid\",\"$gbm/expression/stringtie/ref_only/3
\"\n\"4\",\"011_organoid\",\"$gbm/expression/stringtie/ref_only/4
\"\n\"5\",\"011_tissue\",\"$gbm/expression/stringtie/ref_only/5
\"\n\"6\",\"011_tissue\",\"$gbm/expression/stringtie/ref_only/6
\"\n\"7\",\"011_invitro\",\"$gbm/expression/stringtie/ref_only/7
\"\n\"8\",\"011_invitro\",\"$gbm/expression/stringtie/ref_only/8
\"\n" > GBM011_all.csv

	cd $gbm/de/ballgown/ref_only/

	printf "\"ids\",\"type\",\"path\"\n\"1\",\"011_slice\",\"$gbm/expression/stringtie/ref_only/1\"\n\"2\",\"011_slice\",\"$gbm/expression/stringtie/ref_only/2\"\n\"3\",\"011_organoid\",\"$gbm/expression/stringtie/ref_only/3\"\n\"4\",\"011_organoid\",\"$gbm/expression/stringtie/ref_only/4\"\n\"5\",\"011_tissue\",\"$gbm/expression/stringtie/ref_only/5\"\n\"6\",\"011_tissue\",\"$gbm/expression/stringtie/ref_only/6\"\n\"7\",\"011_invitro\",\"$gbm/expression/stringtie/ref_only/7\"\n\"8\",\"011_invitro\",\"$gbm/expression/stringtie/ref_only/8\"\n" > GBM011_all.csv

R script:


	R --no-restore
	library(ballgown)
	library(genefilter)
	library(dplyr)
	library(devtools)
	library(ggplot2)
	library(gplots)
	library(GenomicRanges)

	pheno_data = read.csv("GBM011_all.csv")  


	bg = ballgown(samples=as.vector(pheno_data$path), pData=pheno_data)
	bg


	bg_table = texpr(bg, 'all')


	bg_gene_names = unique(bg_table[, 9:10])
	head(bg_gene_names)


	save(bg, file='bg.rda')

	bg
output: ballgown instance with 190734 transcripts and 8 samples


	pdf(file="GBM011_R_output.pdf")

	working_dir = "~/workspace/gbm/de/ballgown/ref_only"
	setwd(working_dir)
	dir()


Import expression and differential expression results from the HISAT2/StringTie/Ballgown pipeline
	
	load('bg.rda')


Load gene names for lookup later in the tutorial
	
	bg_table = texpr(bg, 'all')
	bg_gene_names = unique(bg_table[, 9:10])


Pull the gene_expression data frame from the ballgown object

	gene_expression = as.data.frame(gexpr(bg))
	head(gene_expression)

View the column names

	colnames(gene_expression)

View the row names
	
	row.names(gene_expression)

Determine the dimensions of the dataframe.  'dim()' will return the number of rows and columns

	dim(gene_expression)


Just for fun, check BRD4 expression across all 8 samples:

	i = row.names(gene_expression) == "BRD4"
	gene_expression[i,]






Load the transcript to gene index from the ballgown object. Each row of data represents a transcript. Many of these transcripts represent the same gene. Determine the numbers of transcripts and unique genes  


	transcript_gene_table = indexes(bg)$t2g
	head(transcript_gene_table)
	
	length(row.names(transcript_gene_table)) #Transcript count
	length(unique(transcript_gene_table[,"g_id"])) #Unique Gene count

> length(row.names(transcript_gene_table)) #Transcript count
[1] 190734
> length(unique(transcript_gene_table[,"g_id"])) #Unique Gene count
[1] 54651




Plot the number of transcripts per gene. Many genes will have only 1 transcript, some genes will have several transcripts. Use the 'table()' command to count the number of times each gene symbol occurs (i.e. the # of transcripts that have each gene symbol). Then use the 'hist' command to create a histogram of these counts

	counts=table(transcript_gene_table[,"g_id"])
	c_one = length(which(counts == 1))
	c_more_than_one = length(which(counts > 1))
	c_max = max(counts)
	hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene", main="Distribution of transcript count per gene")
	legend_text = c(paste("Genes with one transcript =", c_one), paste("Genes with more than one transcript =", c_more_than_one), paste("Max transcripts for single gene = ", c_max))
	legend("topright", legend_text, lty=NULL)


Plot the distribution of transcript sizes as a histogram. lengths will be those of known transcripts. Good QC step: we had a low coverage library, or other problems, we might get short 'transcripts' that are actually only pieces of real transcripts.

	full_table <- texpr(bg , 'all')
	hist(full_table$length, breaks=500, xlab="Transcript length (bp)", main="Distribution of transcript lengths", col="steelblue")

View the summary FPKM values (minimum and maximum FPKM values) for any particular library

	min(gene_expression[,"FPKM.1"])
	max(gene_expression[,"FPKM.2"])


Set the minimum non-zero FPKM values by one of two ways:

coverting 0's to NA, and calculating the minimum or all non NA values
two ways: 
zz = fpkm_matrix[,data_columns]
zz[zz==0] = NA
min_nonzero = min(zz, na.rm=TRUE)
min_nonzero


Alternatively just set min value to 1
	
	min_nonzero=1

Set the columns for finding FPKM and create shorter names for figures

	data_columns=c(1:8)
	short_names=c("slice_1","slice2","organoid_1","organoid_2","tissue_1","tissue_2","invitro_1","invitro_2")


Plot range of values and general distribution of FPKM values for all 8 libraries

Create boxplots using different colors by setting storing the colors of the columns in a variable called data_colors. then display on a log2 scale and add the minimum non-zero value to avoid log2(0). Note that the bold horizontal line on each boxplot is the median.


	colors()
	data_colors=c("tomato1","tomato2","royalblue1","royalblue2","seagreen1","seagreen2","grey1","grey2")

	boxplot(log2(gene_expression[,data_columns]+min_nonzero), col=data_colors, names=short_names, las=2, ylab="log2(FPKM)", main="Distribution of FPKMs for all 8 sample libraries")



## plot a pair of replicates to assess reproducibility of technical replicates. 
Tranform the data by converting to log2 scale after adding an arbitrary small value to avoid log2(0). Also add a straight line of slope 1, and intercept 0. Also calculate the correlation coefficient and display in a legend.

	x = gene_expression[,"FPKM.1"]
	y = gene_expression[,"FPKM.2"]
	plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="blue", cex=0.25, xlab="FPKM (011_slice, Replicate 1)", ylab="FPKM (011_slice, Replicate 2)", main="Comparison of expression values for replicates of slice samples")
	abline(a=0,b=1)
	rs=cor(x,y)^2
	legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")


check organoid samples

	x = gene_expression[,"FPKM.3"]
	y = gene_expression[,"FPKM.4"]
	plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="blue", cex=0.25, xlab="FPKM (011_organoid, Replicate 1)", ylab="FPKM (011_organoid, Replicate 2)", main="Comparison of expression values for replicates of organoid samples")
	abline(a=0,b=1)
	rs=cor(x,y)^2
	legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")

check tissue samples

	x = gene_expression[,"FPKM.5"]
	y = gene_expression[,"FPKM.6"]
	plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="blue", cex=0.25, xlab="FPKM (011_tissue, Replicate 1)", ylab="FPKM (011_tissue, Replicate 2)", main="Comparison of expression values for replicates of tissue samples")
	abline(a=0,b=1)
	rs=cor(x,y)^2
	legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")


check in vitro samples

	x = gene_expression[,"FPKM.7"]
	y = gene_expression[,"FPKM.8"]
	plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="blue", cex=0.25, xlab="FPKM (011_invitro, Replicate 1)", ylab="FPKM (011_invitro, Replicate 2)", main="Comparison of expression values for replicates of in vitro samples")
	abline(a=0,b=1)
	rs=cor(x,y)^2
	legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")



## Compare the correlation distance between all replicates

Calculate the FPKM sum for all 8 libraries

	gene_expression[,"sum"]=apply(gene_expression[,data_columns], 1, sum)

Filter out genes with a grand sum FPKM of less than 10

	i = which(gene_expression[,"sum"] > 10)


Calculate the correlation between all pairs of data

	r=cor(gene_expression[i,data_columns], use="pairwise.complete.obs", method="pearson")
	r
	
	
## Plot MDS.
Convert correlation to distance, and use 'multi-dimensional scaling' to plot the relative differences between libraries, by calculating 2-dimensional coordinates to plot points for each library using eigenvectors (eig=TRUE). d, k=2 means 2 dimensions
	
	d=1-r
	mds=cmdscale(d, k=2, eig=TRUE)
	par(mfrow=c(1,1))
	plot(mds$points, type="n", xlab="", ylab="", main="MDS distance plot (all non-zero genes)", xlim=c(-0.4,0.4), ylim=c(-0.4,0.4))
	points(mds$points[,1], mds$points[,2], col="grey", cex=2, pch=16)
	text(mds$points[,1], mds$points[,2], short_names, col=data_colors)

Calculate the differential expression results including significance

	results_genes = stattest(bg, feature="gene", covariate="type", getFC=TRUE, meas="FPKM")
	results_genes = merge(results_genes,bg_gene_names,by.x=c("id"),by.y=c("gene_id"))



close out the PDF
dev.off()



R script for other samples are located in other files in the same danluo7/gbm project folder




# Could also do pairwise comparisons for 011 (but has to be two at a time):

against invitro:
printf "\"ids\",\"type\",\"path
\"\n\"1\",\"011_slice\",\"$gbm/expression/stringtie/1
\"\n\"2\",\"011_slice\",\"$gbm/expression/stringtie/2
\"\n\"7\",\"011_invitro\",\"$gbm/expression/stringtie/7
\"\n\"8\",\"011_invitro\",\"$gbm/expression/stringtie/8
\"\n" > 011_slice_vs_invitro.csv

	printf "\"ids\",\"type\",\"path\"\n\"1\",\"011_slice\",\"$gbm/expression/stringtie/1\"\n\"2\",\"011_slice\",\"$gbm/expression/stringtie/2\"\n\"7\",\"011_invitro\",\"$gbm/expression/stringtie/7\"\n\"8\",\"011_invitro\",\"$gbm/expression/stringtie/8\"\n" > 011_slice_vs_invitro.csv

	
R script (for slice vs in vitro comparison), rest in gbm folder.

	R --no-restore
	library(ballgown)
	library(genefilter)
	library(dplyr)
	library(devtools)

	pheno_data = read.csv("011_slice_vs_invitro.csv")     ###change me


	bg = ballgown(samples=as.vector(pheno_data$path), pData=pheno_data)
	bg


	bg_table = texpr(bg, 'all')


	bg_gene_names = unique(bg_table[, 9:10])
	head(bg_gene_names)


	save(bg, file='bg.rda')
	
The stattest function below will require pairwise comparisons and can't know multiple comparisons at once

	results_transcripts = stattest(bg, feature="transcript", covariate="type", getFC=TRUE, meas="FPKM")


	results_genes = stattest(bg, feature="gene", covariate="type", getFC=TRUE, meas="FPKM")

	head(results_genes)


	results_genes = merge(results_genes, bg_gene_names, by.x=c("id"), by.y=c("gene_id"))

	write.table(results_transcripts, "011_slice_vs_invitro_transcript_results.tsv", sep="\t", quote=FALSE, row.names = FALSE)    ###change me
	write.table(results_genes, "011_slice_vs_invitro_gene_results.tsv", sep="\t", quote=FALSE, row.names = FALSE)                 ###change me


	bg_filt = subset (bg,"rowVars(texpr(bg)) > 1", genomesubset=TRUE)


	bg_filt_table = texpr(bg_filt , 'all')
	bg_filt_gene_names = unique(bg_filt_table[, 9:10])


	results_transcripts = stattest(bg_filt, feature="transcript", covariate="type", getFC=TRUE, meas="FPKM")
	results_genes = stattest(bg_filt, feature="gene", covariate="type", getFC=TRUE, meas="FPKM")
	results_genes = merge(results_genes, bg_filt_gene_names, by.x=c("id"), by.y=c("gene_id"))


	write.table(results_transcripts, "011_slice_vs_invitro_transcript_results_filtered.tsv", sep="\t", quote=FALSE, row.names = FALSE)   ###change me
	write.table(results_genes, "011_slice_vs_invitro_results_filtered.tsv", sep="\t", quote=FALSE, row.names = FALSE)    ###change me
	
	sig_transcripts = subset(results_transcripts, results_transcripts$pval<0.05)
	sig_genes = subset(results_genes, results_genes$pval<0.05)

	head(sig_genes)

	nrow(sig_genes)

	write.table(sig_transcripts, "011_slice_vs_invitro_transcript_results_sig.tsv", sep="\t", quote=FALSE, row.names = FALSE)      ###change me
	write.table(sig_genes, "011_slice_vs_invitro_gene_results_sig.tsv", sep="\t", quote=FALSE, row.names = FALSE)         ###change me

	quit()
	n

	grep -v feature 011_slice_vs_invitro_gene_results_filtered.tsv | wc -l

	grep -v feature 011_slice_vs_invitro_gene_results_sig.tsv | sort -rnk 3 | head -n 20 | column -t 	#Higher abundance in invitro
	grep -v feature 011_slice_vs_invitro_gene_results_sig.tsv | sort -nk 3 | head -n 20 | column -t 	#Higher abundance in tissue



	grep -v feature 011_slice_vs_invitro_gene_results_sig.tsv | cut -f 6 | sed 's/\"//g' > 011_slice_vs_invitro_DE_genes.txt

	head 011_slice_vs_invitro_DE_genes.txt

11 more scripts in gbm folder.









# Parallel to Ballgown, also need to use edgeR for DE analysis

	cd $gbm
	mkdir -p de/htseq_counts
	cd de/htseq_counts

## Launch R, set working directory, read in the count matrix tsv file created by htseq, and check dimensions of the file.

	R --no-restore
	working_dir = "~/workspace/gbm/de/htseq_counts"
	setwd(working_dir)


Doing 011 samples for slice vs in vitro pairwise comparisons first.

	rawdata=read.table("~/workspace/gbm/expression/htseq_counts/GBM011_slice_vs_invitro_gene_read_counts_table_all_final.tsv", header=TRUE, stringsAsFactors=FALSE, row.names=1)

	dim(rawdata)

output: [1] 54651     4


Require at least 1/4 of samples to have expressed count >= 10

	sample_cutoff <- (1/4)
	count_cutoff <- 10

Define a function to calculate the fraction of values expressed above the count cutoff

	getFE <- function(data,count_cutoff){
	 FE <- (sum(data >= count_cutoff)/length(data))
	 return(FE)
	}

Apply the function to all genes, and filter out genes not meeting the sample cutoff

	fraction_expressed <- apply(rawdata, 1, getFE, count_cutoff)
	keep <- which(fraction_expressed >= sample_cutoff)
	rawdata <- rawdata[keep,]

Check dimensions again to see effect of filtering

	dim(rawdata)

output: 

load edgeR
[1] 18302     4
went from 54k to 18k. 

	library('edgeR')

make class labels

	class <- c( rep("011_invitro",2), rep("011_slice",2) )


Get common gene names (placeholder code for when I need to use ENSEMBL reference genomes instead of NCBI) in that case, will just need to do Gene=rownames(rawdata) Symbol=mapping[Gene,1] gene_annotations=cbind(Gene,Symbol)

	Gene=rownames(rawdata)
	Symbol=rownames(rawdata)
	gene_annotations=cbind(Gene,1)

Make DGEList object

	y <- DGEList(counts=rawdata, genes=gene_annotations, group=class)
	nrow(y)

TMM Normalization

	y <- calcNormFactors(y)

Estimate dispersion

	y <- estimateCommonDisp(y, verbose=TRUE)
	y <- estimateTagwiseDisp(y)

Differential expression test

	et <- exactTest(y)

Extract raw counts to add back onto DE results

	counts <- getCounts(y)

Print top genes

	topTags(et)

Print number of up/down significant genes at FDR = 0.05 significance level

	summary(de <- decideTestsDGE(et, adjust.method="BH", p=.05))

Get output with BH-adjusted FDR values - all genes, any p-value, unsorted

	out <- topTags(et, n = "Inf", adjust.method="BH", sort.by="none", p.value=1)$table

Add raw counts back onto results for convenience (make sure sort and total number of elements allows proper join)

	out2 <- cbind(out, counts)

Limit to significantly DE genes

	out3 <- out2[as.logical(de),]

Order by q-value

	o <- order(et$table$PValue[as.logical(de)],decreasing=FALSE)

	out4 <- out3[o,]

Save table

	write.table(out4, file="011_DE_genes.txt", quote=FALSE, row.names=FALSE, sep="\t")

q() then

	cd $gbm/de/htseq_counts/

	cut -f 1 $gbm/de/htseq_counts/011_DE_genes.txt | sort | uniq | grep -v Gene_Name > 011_DE_gene_symbols.txt



(not sure what happened to the video of first half of this tutorial: https://rnabio.org/module-03-expression/0003/04/01/DE_Visualization/)






starting from "supplementary R analysis:

# creat multidimention plots to visualize differences between samples and replicates within samples

	cd $gbm/de/ballgown/ref_only/

R scripts in same folder.
